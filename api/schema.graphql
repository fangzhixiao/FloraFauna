scalar GraphQLDate

enum SightingType {
    ANIMAL
    PLANT
}

type Location {
    lat: Float!
    lng: Float!
}

type Comment {
    commenter: String!
    content:String!
    created: GraphQLDate!
}

# "TODO: Need to add comment input in schema"
input CommentInput {
    commenter: String!
    content:String!
    created: GraphQLDate!
}

type Post {
    _id: ID!
    id: Int!
    title: String!
    sightingType: SightingType!
    authorId: Int!
    created: GraphQLDate!
    spotted: GraphQLDate!
    location: Location!
    images:[String]
    description: String
    comments: [Comment]
}

type User {
    _id: ID!
    id: Int!
    signedIn: Boolean!
    givenName: String
    email: String
    postIds: [Int]
}

input LocationInput {
    lat: Float!
    lng: Float!
}

"Toned down Posts, used as inputs, without server generated values."
input PostInputs {
    _id: ID!
    id: Int!
    title: String!
    sightingType: SightingType!
    authorId: Int!
    created: GraphQLDate!
    spotted: GraphQLDate!
    location: LocationInput!
    images:[String]
    description: String
}

"""Inputs for postUpdate: all are optional. Whichever is specified will be set to the given value,
undefined fields will remain unmmodified."""

# "TODO: Need to add comments to this part of schema"
input PostUpdateInputs {
    title: String
    sightingType: SightingType
    spotted: GraphQLDate!
    location: LocationInput!
    images: [String]
    description: String
    comments: [CommentInput]
}

##### Top level declarations
# Query and Mutation define the entry point of every GraphQL query
# "TODO need to add more to postList for filter purposes"
type Query {
    about: String!
    user: User!
    postList(
        sightingType: SightingType
        search: String
        authorId: Int
    ): [Post!]!
    post(id: Int!): Post!
}

type Mutation {
    setAboutMessage(message: String!): String
    postAdd(post: PostInputs!): Post!
    postUpdate(id: Int!, changes: PostUpdateInputs!): Post!
    postDelete(id: Int!): Boolean!
    postRestore(id: Int!): Boolean!
}
